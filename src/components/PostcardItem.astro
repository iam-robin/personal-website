---
export interface Props {
    author: string;
    body: string;
    date: Date;
    distorted?: boolean;
    // Add all style properties with default values
    marginBottom?: number;
    marginRight?: number;
    rotation?: number;
    penColor?: string;
    paperColor?: string;
    fontSizeFactor?: number;
    lineHeight?: number;
    authorLeftOffset?: number;
    authorTopOffset?: number;
    authorRotation?: number;
    dateLeftOffset?: number;
    dateTopOffset?: number;
    dateRotation?: number;
    bodyLeftOffset?: number;
    bodyTopOffset?: number;
    bodyRotation?: number;
    stampSvg?: string;
}

const {
    author,
    body,
    date,
    distorted = true,
    // Use passed props or generate random values
    marginBottom = Math.floor(Math.random() * 8),
    marginRight = Math.floor(Math.random() * 8),
    rotation = Math.floor(Math.random() * 4 - 2),
    // Default pen and paper colors if not provided
    penColor = '#000000',
    paperColor = '#FAF9F6',
    // Font sizing
    fontSizeFactor = 0.9 + Math.random() * 0.2,
    lineHeight: lineHeightFactor = 1.1 + Math.random() * 0.4,
    // Author positioning
    authorLeftOffset = Math.floor(Math.random() * 10) - 5,
    authorTopOffset = Math.floor(Math.random() * 6) - 3,
    authorRotation = Math.floor(Math.random() * 6) - 3,
    // Date positioning
    dateLeftOffset = Math.floor(Math.random() * 10) - 5,
    dateTopOffset = Math.floor(Math.random() * 6) - 3,
    dateRotation = Math.floor(Math.random() * 6) - 3,
    // Body text positioning
    bodyLeftOffset = Math.floor(Math.random() * 8) - 4,
    bodyTopOffset = Math.floor(Math.random() * 8) - 4,
    bodyRotation = Math.floor(Math.random() * 4) - 2,
    stampSvg = ''
} = Astro.props as Props;

// Calculate font size from size factor
const fontSize = `${fontSizeFactor}em`;
const lineHeight = lineHeightFactor.toFixed(2);

// Format the date
const formattedDate = date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
});

const transformStyles = distorted
    ? `transform: translateY(${marginBottom}px) translateX(${marginRight}px) rotate(${rotation}deg);`
    : `transform: rotate(${rotation}deg);`;

const authorStyles = `transform: translateX(${authorLeftOffset}px) translateY(${authorTopOffset}px) rotate(${authorRotation}deg); font-size: ${fontSize}; color: ${penColor}; filter: url(#distort-xl);`;
const dateStyles = `transform: translateX(${dateLeftOffset}px) translateY(${dateTopOffset}px) rotate(${dateRotation}deg); font-size: ${fontSize}; color: ${penColor}; filter: url(#distort-xl);`;
const bodyStyles = `transform: translateX(${bodyLeftOffset}px) translateY(${bodyTopOffset}px) rotate(${bodyRotation}deg); font-size: ${fontSize}; line-height: ${lineHeight}; color: ${penColor}; filter: url(#distort-xl);`;

// Determine shadow class at build time based on rotation
const shadowClass = rotation >= 0 ? 'hide-after' : 'hide-before';
---

<div
    class={`corner-shadow-effect aspect-[3/2] w-full max-w-2xl ${shadowClass}`}
    style={transformStyles}
>
    <div
        class="flex justify-between h-full w-full border border-black-100"
        style={`background-color: ${paperColor};`}
    >
        <div class="w-6/12 py-6 px-8 font-script text-md relative">
            <span class="absolute" style={bodyStyles}>{body}</span>
        </div>
        <div class="w-[1px] bg-black-200 h-3/4 self-center"></div>
        <div class="w-6/12 flex flex-col justify-between py-6 px-8">
            <div class="h-1/2 flex justify-end">
                <div class="stamp inline-block w-[66px] h-[66px] p-[3px] bg-white relative">
                    <div class="bg-white h-full w-full p-[2px]">
                        {
                            stampSvg ? (
                                <div
                                    class="h-full w-full flex items-center justify-center"
                                    set:html={stampSvg}
                                />
                            ) : (
                                <div class="bg-red h-full w-full" />
                            )
                        }
                    </div>
                </div>
            </div>
            <div class="h-1/2 flex items-end">
                <ul class="w-full space-y-3">
                    <li class="flex flex-col gap-1">
                        <span class="font-mono text-xs -mb-1 text-black-600">From:</span>
                        <div
                            class="text-md font-script border-b border-black-600 border-dotted h-8"
                        >
                            <span class="absolute" style={authorStyles}>{author}</span>
                        </div>
                    </li>
                    <li class="flex flex-col gap-1">
                        <span class="font-mono text-xs -mb-1 text-black-600">Date:</span>
                        <div
                            class="text-md font-script border-b border-black-600 border-dotted h-8"
                        >
                            <span class="absolute" style={dateStyles}>{formattedDate}</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<style>
    .stamp {
        -webkit-filter: drop-shadow(0px 0px 1px rgba(0, 0, 0, 0.3));
        background: radial-gradient(transparent 0px, transparent 2px, white 2px, white);
        background-size: 6px 6px;
        background-position: -9px -9px;
    }
</style>
