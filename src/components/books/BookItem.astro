---
import type { Author } from './BookSection.astro';
import { getSpineColors } from '../../utils/spineColors';

interface Props {
    cover: string;
    title: string;
    pageCount?: number;
    authors?: Author[];
}

const { cover, title, pageCount, authors } = Astro.props as Props;

// Default aspect ratio if image loading fails
const defaultAspectRatio = 150; // 1.5:1 as percentage
const id = `book-${Math.random().toString(36).substring(2, 9)}`;

// Calculate thickness directly from page count
const thicknessPerPage = 0.1;
const defaultPageCount = 250;
const thickness = (pageCount || defaultPageCount) * thicknessPerPage;
const spinePosition = -1 * (thickness / 2);
const { background: spineBackground, text: spineTextColor } = await getSpineColors(title, cover);
---

<div class="w-full flex flex-col gap-8 items-center">
    <div class="book-container" aria-label={title} id={id}>
        <div class="book">
            <!-- Front Cover -->
            <div class="book-front">
                <img
                    src={cover}
                    alt={`Cover of ${title} ${authors && authors.length > 0 ? `by ${authors[0].name}` : ''}`}
                    class="w-full h-full object-cover"
                    loading="lazy"
                    onload={`
                    (function() {
                        const img = this;
                        if (img.complete && img.naturalHeight > 0) {
                            const ratio = (img.naturalHeight / img.naturalWidth) * 100;
                            document.getElementById('${id}').style.setProperty('--book-aspect-ratio', ratio + '%');
                        }
                    }).call(this);
                `}
                />
            </div>

            <!-- Pages (right side) -->
            <div class="book-pages"></div>

            <!-- Spine (left side) -->
            <div class="book-spine"></div>

            <!-- Back Cover -->
            <div class="book-back"></div>
        </div>
    </div>
    <div class="mt-2 text-xs text-center truncate" title={title}>{title}</div>
</div>

<script define:vars={{ id }}>
    document.addEventListener('DOMContentLoaded', () => {
        const bookContainer = document.getElementById(id);
        if (!bookContainer) {
            console.error(`Book container with id ${id} not found`);
            return;
        }

        const book = bookContainer.querySelector('.book');

        // Default rotation values
        const defaultRotateY = 25;
        const defaultRotateX = 0;

        // Predefined rotation states
        const leftRotateY = -50; // Rotation when cursor is on left third
        const frontRotateY = 0; // Rotation when cursor is in middle third - front view
        const rightRotateY = 50; // Rotation when cursor is on right third

        // Add mouse movement tracking
        bookContainer.addEventListener('mousemove', (e) => {
            // Get the boundaries of the book container
            const rect = bookContainer.getBoundingClientRect();

            // Calculate position within the container (0 to 1)
            const positionX = (e.clientX - rect.left) / rect.width;

            // Determine which third of the container the cursor is in
            if (positionX < 0.33) {
                // Left third - show pages/spine
                book.style.transform = `rotateY(${leftRotateY}deg)`;
            } else if (positionX < 0.66) {
                // Middle third - front view
                book.style.transform = `rotateY(${frontRotateY}deg)`;
            } else {
                // Right third - show cover
                book.style.transform = `rotateY(${rightRotateY}deg)`;
            }
        });

        // Reset to default position when mouse leaves
        bookContainer.addEventListener('mouseleave', () => {
            book.style.transform = `rotateY(${defaultRotateY}deg) rotateX(${defaultRotateX}deg)`;
        });
    });
</script>

<style define:vars={{ thickness, spinePosition, spineBackground }}>
    .book-container {
        width: 100%;
        max-width: 160px;
        perspective: 1000px;
        margin: 0 auto;
        --book-aspect-ratio: ${defaultAspectRatio}%;
    }

    .book {
        position: relative;
        width: 100%;
        padding-bottom: var(--book-aspect-ratio);
        transform-style: preserve-3d;
        transform: rotateY(25deg); /* Updated to match default in JS */
        transition: transform 0.3s ease-out;
    }

    .book-front {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        transform: translateZ(calc(var(--thickness) / 2 * 1px));
        overflow: hidden;
        border-radius: 0 2px 2px 0;
        box-shadow:
            0px 4px 16px rgba(17, 17, 26, 0.1),
            0px 8px 32px rgba(17, 17, 26, 0.05);
    }

    .book-back {
        position: absolute;
        top: 0;
        left: 0;
        width: calc(100% + 3px);
        height: 100%;
        transform: translateZ(calc(var(--thickness) / 2 * -1px));
        background-color: var(--spineBackground);
        border-radius: 0 2px 2px 0;
    }

    .book-pages {
        position: absolute;
        top: 1px;
        bottom: 1px;
        right: 0; /* Align exactly at the edge */
        width: calc(var(--thickness) * 1px);
        transform: rotateY(90deg) translateZ(calc(var(--thickness) / 2 * 1px)); /* Match to half thickness */
        background: repeating-linear-gradient(to right, #ccc 0px, #ccc 1px, #fff 1px, #fff 2px);
    }

    .book-spine {
        position: absolute;
        top: 0;
        left: 0;
        width: calc(var(--thickness) * 1px);
        height: 100%;
        transform: rotateY(90deg) translateZ(calc(var(--spinePosition) * 1px));
        background: var(--spineBackground);
    }
</style>
