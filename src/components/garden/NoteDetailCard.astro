---
import Divider from '@components/Divider.astro';
import Markdown from 'astro-remote/lib/Markdown.astro';
import { categoriesWhitelist } from 'src/api/github';
import { colors } from './utils/colors';

interface Props {
    slug: string;
    path: string;
    body: any;
    frontmatter: any;
    previousTitle: string;
    nextTitle: string;
}

const { slug, path, body, frontmatter, previousTitle, nextTitle } = Astro.props;

const title = slug.endsWith('.md') ? slug.replace(/\.md$/, '') : slug;

const categoryIndex = categoriesWhitelist.indexOf(path);
const backgroundColor = colors[categoryIndex];
const backgroundColorStyle = `background-color: ${backgroundColor};`;

const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day} / ${month} / ${year}`;
};

const editedDate = formatDate(frontmatter.edited);
const createdDate = formatDate(frontmatter.created);

// Regular expression to match footnotes
const footnoteRegex = /\[\^(\d+)\]:\s(.+)/g;

// Extract footnotes
let footnotes: { id: string; content: string }[] = [];
let bodyWithoutFootnotes = body.replace(footnoteRegex, (match: string, p1: string, p2: string) => {
    footnotes.push({ id: p1, content: p2 });
    return '';
});

bodyWithoutFootnotes = bodyWithoutFootnotes.trim();
---

<div class="effect flex">
    <div class="relative mt-8 w-full p-2 md:p-4" style={`${backgroundColorStyle}`}>
        <div class="texture"></div>
        <div class="border px-4 pb-24 pt-4 md:px-10 md:pt-6">
            <div class="mx-auto mt-20 max-w-[65ch] text-[1.2rem]">
                <h1 class="font-sans text-[3rem] font-black leading-[1.15] md:text-[4.5rem]">
                    {title}
                </h1>
                <Divider classes="mt-4 mb-8" isBlack />
            </div>
            <div class="markdown prose prose-sm md:prose-base">
                <Markdown content={body} />
            </div>
        </div>
        <div class="mx-auto border-b border-l border-r">
            <div class="flex">
                <span class="flex w-1/3 flex-col items-center gap-2 border-r p-3 md:flex-row">
                    <span>Created:</span>
                    <span
                        class="font-script text-[20px] sm:text-[24px]"
                        style="filter: url(#distort-xl);">{createdDate}</span
                    >
                </span>
                <span class="flex w-1/3 flex-col items-center gap-2 border-r p-3 md:flex-row">
                    <span>Edited:</span>
                    <span
                        class="font-script text-[20px] sm:text-[24px]"
                        style="filter: url(#distort-xl);">{editedDate}</span
                    >
                </span>
                <div class="flex w-1/3 flex-col items-center gap-2 p-3 md:flex-row">
                    <span>Topic:</span>
                    <span
                        class="font-script text-[20px] sm:text-[24px]"
                        style="filter: url(#distort-xl);"
                        >{path.charAt(0).toUpperCase() + path.slice(1)}
                    </span>
                </div>
            </div>
            {
                footnotes.length > 0 && (
                    <div class="flex flex-col border-t px-3 py-6 md:flex-row">
                        <div class="mb-2 w-1/3">Footnotes:</div>
                        <ul class="text-xs md:w-2/3">
                            {footnotes.map((note) => (
                                <li class="flex gap-2" id={`footnote-${note.id}`}>
                                    <span class="font-script text-sm">{note.id}</span>
                                    <a href={note.content}>{note.content}</a>
                                </li>
                            ))}
                        </ul>
                    </div>
                )
            }
            {
                (previousTitle || nextTitle) && (
                    <div class="flex border-t">
                        {previousTitle && (
                            <a
                                href={previousTitle}
                                class={`${
                                    nextTitle ? 'w-1/2' : 'w-full'
                                } cursor-pointer border-r px-3 py-9 text-center hover:bg-black-50`}
                            >
                                ← Previous note
                            </a>
                        )}
                        {nextTitle && (
                            <a
                                href={nextTitle}
                                class={`${
                                    previousTitle ? 'w-1/2' : 'w-full'
                                } cursor-pointer px-3 py-9 text-center hover:bg-black-50`}
                            >
                                Next note →
                            </a>
                        )}
                    </div>
                )
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const markdownDiv = document.querySelector('.markdown');
        const paragraphs = markdownDiv?.querySelectorAll('p');

        paragraphs?.forEach((p) => {
            const images = p.querySelectorAll('img');
            const elementNodes = Array.from(p.childNodes).filter(
                (node) => node.nodeType === Node.ELEMENT_NODE
            );
            if (images.length > 0 && images.length === elementNodes.length) {
                p.classList.add('image-gallery');
            }
        });
    });
</script>

<style>
    .texture {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        /* filter: contrast(200%) brightness(90%); */
        mix-blend-mode: soft-light;
        background: url("data:image/svg+xml,%3Csvg viewBox='0 0 369 369' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.5' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
        pointer-events: none;
    }

    .effect {
        position: relative;
    }
    .effect:after {
        z-index: -1;
        position: absolute;
        content: '';
        width: 50%;
        top: 80%;
        box-shadow: 0 1em 0.5em rgba(0, 0, 0, 0.1);
        transform: rotate(3deg);
        bottom: 16px;
        right: 0.5em;
    }
</style>
