---
import { parseMarkdownContent } from 'src/api/github';
import Divider from './Divider.astro';

interface Props {
    data: any;
    currentPath: string;
    distorted?: boolean;
    classes?: string;
}

function generateHash(oid: string): number {
    return oid.split('').reduce((prevVal, currVal) => {
        return ((prevVal << 5) + currVal.charCodeAt(0)) | 0;
    }, 0);
}

function getSafeIndex(hash: number, length: number): number {
    const safeIndex = hash % length;
    return safeIndex >= 0 ? safeIndex : length + safeIndex;
}

const { data, currentPath, distorted, classes } = Astro.props;
const { frontmatter } = await parseMarkdownContent(data.object.text);

const colors = [
    '#FAE680',
    '#F4DAA0',
    '#A6C2EB',
    '#9EAAFA',
    '#6C95CF',
    '#A2CBAF',
    '#F29874',
    '#E8ADB1',
    '#F4E8C8',
    '#CCA7ED'
];
const hashIndex = getSafeIndex(generateHash(data.object.abbreviatedOid), colors.length);
const backgroundColor = colors[hashIndex];

const createdDay = frontmatter.created.replace(/\d{2}:\d{2}/, '').trim();
const editedDay = frontmatter.edited.replace(/\d{2}:\d{2}/, '').trim();

const randomMarginBottom = Math.floor(Math.random() * 32);
const randomMarginRight = Math.floor(Math.random() * 32);
const randomRotation = Math.floor(Math.random() * 12 - 6);

const backgroundColorStyle = `background-color: ${backgroundColor};`;
const transformStyles = distorted
    ? `${backgroundColorStyle} transform: translateY(${randomMarginBottom}px) translateX(${randomMarginRight}px) rotate(${randomRotation}deg);`
    : `${backgroundColorStyle} transform: rotate(${randomRotation}deg);`;
---

<div
    class:list={[
        'group flex transition-all hover:z-50 hover:rotate-2 hover:scale-105',
        distorted ? 'items-center' : '',
        classes
    ]}
>
    <a class="relative block p-2" href={`${currentPath}/${data.name}`} style={transformStyles}>
        <div class="texture"></div>
        <div class="h-full border p-3 font-mono">
            <h3 class="mt-2 text-sm font-bold">{data.name.replace(/\.md$/, '')}</h3>
            {
                frontmatter.description && (
                    <>
                        <Divider isBlack classes="my-2" />
                        <p class="text-xs">{frontmatter.description}</p>
                    </>
                )
            }
            <Divider isBlack classes="my-2" />
            <div class="text-2xs">
                {createdDay !== editedDay && <p>edited: {editedDay}</p>}
                <p>created: {createdDay}</p>
                <p>{currentPath}</p>
            </div>
        </div>
    </a>
</div>
<style>
    .texture {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        /* filter: contrast(200%) brightness(90%); */
        mix-blend-mode: soft-light;
        background: url("data:image/svg+xml,%3Csvg viewBox='0 0 369 369' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.5' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    }
</style>
