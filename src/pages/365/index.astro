---
import Grid from '@components/Grid.astro';
import GridBox from '@components/GridBox.astro';
import Headline from '@components/Headline.astro';
import SectionContent from '@components/SectionContent.astro';
import { getCollection } from 'astro:content';
import { createDayArray, getDayOfYear } from 'src/utils/365-helpers';
import { Image } from 'astro:assets';
import Layout from '@layouts/Layout.astro';
import { SmileyNervous } from '@phosphor-icons/react';
import RobinCamera from '@assets/images/robin-camera.png';
import Toggle from '@components/Toggle.astro';
import NewSlider from '@components/newSlider/NewSlider.astro';
import NewSliderItem from '@components/newSlider/NewSliderItem.astro';
import DayNavigator from '@components/DayNavigator.astro';

const today = new Date();
const days = createDayArray(getDayOfYear(today));

const photoItems = await getCollection('365');
photoItems.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Create an indexed photo map for proper numbering
const indexedPhotoMap = new Map();
photoItems.forEach((item, index) => {
    indexedPhotoMap.set(item.data.day, photoItems.length - index);
});

const getPhotoForDay = (day: string) => {
    return photoItems.find((photoItem) => photoItem.data.day === day);
};

// Check if there are any placeholder days
const hasPlaceholderDays = days.some((day) => !getPhotoForDay(day));
---

<Layout title="365" description="365 project - one photo a day for a year" ogimageName="365.jpg">
    <div
        class="flex flex-col justify-center pb-16 pt-32 lg:py-40"
        style="min-height: calc(100vh - 120px)"
    >
        <SectionContent
            classes="w-full"
            title="365 project"
            linkText="RSS feed"
            linkUrl="/365-rss.xml"
        >
            I'm capturing and sharing one photo daily for a year. I may not upload them on the same
            day, as I enjoy taking photos more than sharing them.
        </SectionContent>

        <Grid classes="w-full xl:mt-12">
            <GridBox desktopFull tabletFull mobileFull>
                <DayNavigator days={days} photoItems={photoItems} />
            </GridBox>
        </Grid>

        <NewSlider sliderId="photos-slider">
            {
                days.map((day, index) => {
                    const hasPhoto = getPhotoForDay(day);
                    return hasPhoto ? (
                        <NewSliderItem
                            largeFraction={3}
                            mediumFraction={2.5}
                            smallFraction={1.25}
                            itemIdentifierAttribute={day}
                            classes="new-slider-item"
                        >
                            <a href={`365/${hasPhoto.data.day}`} class="h-full w-full">
                                <figure class="h-full w-full">
                                    <Image
                                        src={hasPhoto.data.image as ImageMetadata}
                                        alt={
                                            hasPhoto.data.description
                                                ? (hasPhoto.data.description as string)
                                                : `Photo from ${hasPhoto.data.day}`
                                        }
                                        class="bg-neutral-100"
                                    />
                                    <figcaption class="mt-2 flex items-center gap-3 font-mono text-xs">
                                        <span>
                                            {indexedPhotoMap.get(day).toString().padStart(3, '0')}
                                        </span>
                                        <span>–</span>
                                        <span>{day}</span>
                                    </figcaption>
                                </figure>
                            </a>
                        </NewSliderItem>
                    ) : (
                        <NewSliderItem
                            classes="placeholder-item hidden"
                            itemIdentifierAttribute={day}
                        >
                            <div class="flex h-full w-full flex-col gap-2">
                                <div class="flex h-full w-full items-center justify-center self-start border-2 border-dashed border-black-200 text-center text-black-400">
                                    <div class="flex flex-col items-center gap-2">
                                        <SmileyNervous
                                            weight="regular"
                                            size={40}
                                            color="rgba(0,0,0,0.2)"
                                        />
                                        <p class="px-10">
                                            No photo
                                            <br />
                                            uploaded yet
                                        </p>
                                    </div>
                                </div>
                                <p class="font-mono text-xs text-black-400">{day}</p>
                            </div>
                        </NewSliderItem>
                    );
                })
            }
            {
                hasPlaceholderDays && (
                    <div slot="bottom-left">
                        <Toggle id="toggle-placeholders" label="Show empty days" />
                    </div>
                )
            }
        </NewSlider>
    </div>

    <div class="pb-40">
        <Grid>
            <GridBox
                desktopStart={3}
                desktopEnd={7}
                tabletStart={1}
                tabletEnd={4}
                classes="flex flex-col justify-center"
            >
                <Headline level={3}>But why?</Headline>
                <p class="mt-6">
                    We all know the impulse to want to change something at the beginning of the
                    year, and this is mine: My main goal with this project is to confront my
                    unhealthy perfectionism. By committing to share one photo each day for a year, I
                    aim to learn how to embrace and share work that isn’t perfect. It’s about
                    letting go of the need for everything to be flawless and finding beauty in the
                    process of creation. Join me on this journey as I grow and challenge myself!
                </p>
            </GridBox>
            <GridBox
                desktopStart={9}
                desktopEnd={11}
                tabletStart={6}
                tabletEnd={8}
                mobileStart={1}
                mobileEnd={3}
                classes="flex items-center justify-end md:justify-start mt-12 md:mt-0"
            >
                <Image
                    src={RobinCamera}
                    alt="Illustration of me walking with a camera"
                    widths={[640]}
                    sizes={`320px`}
                    class="max-w-[180px]"
                />
            </GridBox>
        </Grid>
    </div>
</Layout>

<script>
    const togglePlaceholders = document.getElementById('toggle-placeholders') as HTMLInputElement;
    const placeholderItems = document.querySelectorAll('.placeholder-item');

    // Check localStorage for saved preference on page load
    const showEmptyDays = localStorage.getItem('showEmptyDays') === 'true';

    // Set initial toggle state based on saved preference
    if (togglePlaceholders) {
        togglePlaceholders.checked = showEmptyDays;

        // Apply visibility settings on page load
        placeholderItems.forEach((item) => {
            if (showEmptyDays) {
                item.classList.remove('hidden');
            } else {
                item.classList.add('hidden');
            }
        });

        // Add change event listener
        togglePlaceholders.addEventListener('change', (e) => {
            const target = e.target as HTMLInputElement;

            // Save preference to localStorage
            localStorage.setItem('showEmptyDays', target.checked.toString());

            // Update visibility of placeholder items
            placeholderItems.forEach((item) => {
                if (target.checked) {
                    item.classList.remove('hidden');
                } else {
                    item.classList.add('hidden');
                }
            });
        });
    }

    // Day navigator functionality
    document.addEventListener('DOMContentLoaded', () => {
        const dayMarkers: NodeListOf<HTMLElement> = document.querySelectorAll('.day-marker');
        const sliderItems: NodeListOf<HTMLElement> = document.querySelectorAll('.new-slider-item');
        const slider: HTMLElement = document.getElementById('photos-slider') as HTMLElement;
        let activeDay: string | null | undefined = null;

        // Function to update the active marker
        function updateActiveMarker(day: string | undefined) {
            if (activeDay === day) return;

            activeDay = day;
            dayMarkers.forEach((marker: HTMLElement) => {
                if (marker.dataset.day === day) {
                    marker.classList.add('active');
                } else {
                    marker.classList.remove('active');
                }
            });

            // Find the active marker and scroll navigator if needed
            const activeMarker = document.querySelector(
                `.day-marker[data-day="${day}"].active`
            ) as HTMLElement;

            if (activeMarker) {
                const navigator = document.querySelector('.day-navigator') as HTMLElement;

                if (navigator) {
                    // Check if the marker is currently visible in the navigator viewport
                    const markerRect = activeMarker.getBoundingClientRect();
                    const navigatorRect = navigator.getBoundingClientRect();

                    // Check if marker is outside the visible area
                    const isVisible =
                        markerRect.left >= navigatorRect.left &&
                        markerRect.right <= navigatorRect.right;

                    if (!isVisible) {
                        // Get the full offset position relative to the scroll container
                        let fullOffset = activeMarker.offsetLeft;
                        let currentElement = activeMarker.offsetParent as HTMLElement;

                        // Add up all offsets until we reach the scroll container
                        while (currentElement && currentElement !== navigator) {
                            fullOffset += currentElement.offsetLeft;
                            currentElement = currentElement.offsetParent as HTMLElement;
                        }

                        // Calculate the scroll position to center the active marker
                        const scrollPosition =
                            fullOffset - navigatorRect.width / 2 + markerRect.width / 2;

                        // Ensure we don't scroll to negative values
                        navigator.scrollTo({
                            left: Math.max(0, scrollPosition),
                            behavior: 'smooth'
                        });
                    }
                }
            }
        }

        // Click handlers for day markers
        dayMarkers.forEach((marker) => {
            marker.addEventListener('click', () => {
                const day = marker.dataset.day;
                const targetItem = document.querySelector(
                    `.new-slider-item[data-item-identifier="${day}"]`
                ) as HTMLElement;

                if (targetItem) {
                    // Calculate position within the slider
                    const sliderRect = slider.getBoundingClientRect();
                    const targetRect = targetItem.getBoundingClientRect();

                    // Scroll the slider to this item
                    slider?.scrollTo({
                        left: targetItem.offsetLeft - (sliderRect.width - targetRect.width) / 2,
                        behavior: 'smooth'
                    });
                }
            });
        });

        // Track scroll to update active marker
        let scrollTimeout: number | null = null;
        if (slider) {
            slider.addEventListener(
                'scroll',
                () => {
                    // Throttle scroll events
                    if (scrollTimeout !== null) {
                        window.clearTimeout(scrollTimeout);
                    }

                    scrollTimeout = window.setTimeout(() => {
                        // Instead of tracking a single item, collect all with max visibility
                        let maxVisiblePercentage = 0;
                        let itemsWithMaxVisibility: HTMLElement[] = [];

                        sliderItems.forEach((item) => {
                            if (window.getComputedStyle(item).display !== 'none') {
                                // Get item's position relative to the slider
                                const itemLeft = item.offsetLeft;
                                const itemWidth = item.offsetWidth;
                                const itemRight = itemLeft + itemWidth;

                                // Get slider's current scroll position and dimensions
                                const sliderScrollLeft = slider.scrollLeft;
                                const sliderWidth = slider.clientWidth;
                                const sliderRight = sliderScrollLeft + sliderWidth;

                                // Calculate visible portion of the item
                                const visibleLeft = Math.max(itemLeft, sliderScrollLeft);
                                const visibleRight = Math.min(itemRight, sliderRight);
                                const visibleWidth = Math.max(0, visibleRight - visibleLeft);

                                // Calculate visible percentage
                                const percentVisible = visibleWidth / itemWidth;

                                if (percentVisible > maxVisiblePercentage) {
                                    // New maximum, reset collection and add item
                                    maxVisiblePercentage = percentVisible;
                                    itemsWithMaxVisibility = [item];
                                } else if (percentVisible === maxVisiblePercentage) {
                                    // Same percentage as max, add to collection
                                    itemsWithMaxVisibility.push(item);
                                }
                            }
                        });

                        // Choose the item closest to the viewport center
                        let mostVisibleItem: HTMLElement | null = null;

                        if (itemsWithMaxVisibility.length > 0) {
                            if (itemsWithMaxVisibility.length === 1) {
                                // Only one item with max visibility
                                mostVisibleItem = itemsWithMaxVisibility[0];
                            } else {
                                // Multiple items with same visibility - find the one closest to viewport center
                                const sliderCenter = slider.scrollLeft + slider.clientWidth / 2;
                                let minDistance = Infinity;

                                itemsWithMaxVisibility.forEach((item) => {
                                    // Calculate item's center position
                                    const itemCenter = item.offsetLeft + item.offsetWidth / 2;

                                    // Calculate distance to viewport center
                                    const distance = Math.abs(itemCenter - sliderCenter);

                                    // Update if this item is closer to center
                                    if (distance < minDistance) {
                                        minDistance = distance;
                                        mostVisibleItem = item;
                                    }
                                });
                            }
                        }

                        if (mostVisibleItem) {
                            updateActiveMarker(
                                (mostVisibleItem as HTMLElement).dataset.itemIdentifier
                            );
                        }

                        scrollTimeout = null;
                    }, 0);
                },
                { passive: true }
            );
        }

        // Set initial active day
        if (sliderItems.length > 0) {
            const visibleItem = Array.from(sliderItems).find(
                (item) => window.getComputedStyle(item).display !== 'none'
            );

            if (visibleItem) {
                updateActiveMarker(visibleItem.dataset.itemIdentifier);
            }
        }
    });
</script>
